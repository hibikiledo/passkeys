/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/{tenant_id}/credentials": {
    /**
     * List Credentials
     * @description Get a list of webauthn credentials for a user
     */
    get: operations["get-credentials"];
  };
  "/{tenant_id}/credentials/{credential_id}": {
    /**
     * Remove Credential
     * @description Endpoint for removing a webauthn credential
     */
    delete: operations["delete-credentials-credentialId"];
    /**
     * Update Credential
     * @description Endpoint for updating a webauthn credential
     */
    patch: operations["patch-credentials-credentialId"];
  };
  "/{tenant_id}/registration/initialize": {
    /**
     * Start Passkey Registration
     * @description Initialize a registration for webauthn credentials
     */
    post: operations["post-registration-initialize"];
  };
  "/{tenant_id}/registration/finalize": {
    /**
     * Finish Passkey Registration
     * @description Finish credential registration process
     */
    post: operations["post-registration-finalize"];
  };
  "/{tenant_id}/login/initialize": {
    /**
     * Start Login
     * @description Initialize a login flow for passkeys
     */
    post: operations["post-login-initialize"];
  };
  "/{tenant_id}/login/finalize": {
    /**
     * Finish Login
     * @description Finalize the login operation
     */
    post: operations["post-login-finalize"];
  };
  "/{tenant_id}/.well-known/jwks.json": {
    /**
     * Well-known JWKS
     * @description Endpoint for fetching JWKS
     */
    get: operations["get-.well-known-jwks.json"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** public-key-credential */
    "public-key-credential": components["schemas"]["credential"] & {
      rawId: string;
      clientExtensionResults?: Record<string, never>;
      authenticatorAttachment?: string;
    };
    /** credential */
    credential: {
      id: string;
      type: string;
    };
    /** authenticator-attestation-response */
    "authenticator-attestation-response": components["schemas"]["authenticator-response"] & ({
      attestationObject: string;
      transports?: string[] | null;
    });
    /** authenticator-response */
    "authenticator-response": {
      clientDataJSON: string;
    };
    /** autenticator-assertion-response */
    "autenticator-assertion-response": components["schemas"]["authenticator-response"] & ({
      authenticatorData: string;
      signature: string;
      userHandle?: string | null;
    });
    /** relying-party-entity */
    "relying-party-entity": {
      id: string;
    } & components["schemas"]["credential-entity"];
    /** credential-entity */
    "credential-entity": {
      name: string;
      icon?: string | null;
    };
    /** user-entity */
    "user-entity": ({
      id: string;
      displayName?: string | null;
    }) & components["schemas"]["credential-entity"];
    /** credential-parameter-entity */
    "credential-parameter-entity": {
      type: string;
      /** Format: int32 */
      alg: number;
    };
    /** credential-descriptor-entity */
    "credential-descriptor-entity": {
      type: string;
      id: string;
      transports?: string[] | null;
    };
    /** authentication-selection-entity */
    "authentication-selection-entity": {
      authenticatorAttachement?: string | null;
      /** @default false */
      requireResidentKey?: boolean | null;
      residentKey?: string | null;
      userVerification?: string | null;
    };
  };
  responses: {
    /** @description Example response */
    "get-credentials": {
      content: {
        "application/json": ({
            id: string;
            name?: string | null;
            public_key: string;
            attestation_type: string;
            /** Format: uuid */
            aaguid: string;
            /** Format: date-time */
            last_used_at?: string | null;
            /** Format: date-time */
            created_at: string;
            transports: string[];
            /** @default false */
            backup_eligible: boolean;
            /** @default false */
            backup_state: boolean;
          })[];
      };
    };
    /** @description Error Response with detailed information */
    error: {
      content: {
        "application/json": {
          type?: string | null;
          title?: string | null;
          details?: string | null;
          status?: number | null;
        };
      };
    };
    /** @description Example response */
    "post-registration-initialize": {
      content: {
        "application/json": {
          publicKey: {
            rp: components["schemas"]["relying-party-entity"];
            user: components["schemas"]["user-entity"];
            challenge: string;
            pubKeyCredParams?: components["schemas"]["credential-parameter-entity"][] | null;
            timeout?: number | null;
            excludeCredentials?: components["schemas"]["credential-descriptor-entity"][] | null;
            authenticatorSelection?: components["schemas"]["authentication-selection-entity"];
            attestation?: string;
            extensions?: Record<string, never>[];
          };
        };
      };
    };
    /** @description Example response */
    "post-login-initialize": {
      content: {
        "application/json": {
          publicKey: {
            challenge: string;
            /** Format: int32 */
            timeout?: number | null;
            rpId?: string | null;
            allowCredentials?: string[] | null;
            userVerification?: string | null;
            extensions?: Record<string, never>[] | null;
          };
        };
      };
    };
    /** @description Example response */
    jwks: {
      content: {
        "application/json": {
          keys?: {
              alg?: string;
              e?: string;
              /** Format: uuid */
              kid?: string;
              kty?: string;
              n?: string;
              use?: string;
            }[];
        };
      };
    };
    /** @description Example response */
    token: {
      content: {
        "application/json": {
          token?: string;
        };
      };
    };
  };
  parameters: {
    /** @description representational id of the user */
    user_id: string;
    /** @description UUID of the credential */
    credential_id: string;
    /** @description UUID of the tenant */
    tenant_id: string;
    /** @description Secret API key */
    "X-API-KEY": string;
  };
  requestBodies: {
    "patch-credential"?: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
    "post-registration-initialize"?: {
      content: {
        "application/json": {
          user_id: string;
          username: string;
          icon?: string | null;
          display_name?: string | null;
        };
      };
    };
    "post-registration-finalize"?: {
      content: {
        "application/json": components["schemas"]["public-key-credential"] & ({
          response: components["schemas"]["authenticator-attestation-response"];
          transports?: string[] | null;
        });
      };
    };
    "post-login-finalize"?: {
      content: {
        "application/json": components["schemas"]["public-key-credential"] & {
          response: components["schemas"]["autenticator-assertion-response"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List Credentials
   * @description Get a list of webauthn credentials for a user
   */
  "get-credentials": {
    parameters: {
      query: {
        user_id: components["parameters"]["user_id"];
      };
      header: {
        apiKey: components["parameters"]["X-API-KEY"];
      };
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    requestBody?: {
      content: {
        "*/*": never;
      };
    };
    responses: {
      200: components["responses"]["get-credentials"];
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Remove Credential
   * @description Endpoint for removing a webauthn credential
   */
  "delete-credentials-credentialId": {
    parameters: {
      path: {
        credential_id: components["parameters"]["credential_id"];
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      404: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Update Credential
   * @description Endpoint for updating a webauthn credential
   */
  "patch-credentials-credentialId": {
    parameters: {
      header: {
        apiKey: components["parameters"]["X-API-KEY"];
      };
      path: {
        credential_id: components["parameters"]["credential_id"];
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    requestBody: components["requestBodies"]["patch-credential"];
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      404: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Start Passkey Registration
   * @description Initialize a registration for webauthn credentials
   */
  "post-registration-initialize": {
    parameters: {
      header: {
        apiKey: components["parameters"]["X-API-KEY"];
      };
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    requestBody: components["requestBodies"]["post-registration-initialize"];
    responses: {
      200: components["responses"]["post-registration-initialize"];
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Finish Passkey Registration
   * @description Finish credential registration process
   */
  "post-registration-finalize": {
    parameters: {
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    requestBody: components["requestBodies"]["post-registration-finalize"];
    responses: {
      200: components["responses"]["token"];
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      404: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Start Login
   * @description Initialize a login flow for passkeys
   */
  "post-login-initialize": {
    parameters: {
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    responses: {
      200: components["responses"]["post-login-initialize"];
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      404: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Finish Login
   * @description Finalize the login operation
   */
  "post-login-finalize": {
    parameters: {
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    requestBody: components["requestBodies"]["post-login-finalize"];
    responses: {
      200: components["responses"]["token"];
      400: components["responses"]["error"];
      401: components["responses"]["error"];
      404: components["responses"]["error"];
      500: components["responses"]["error"];
    };
  };
  /**
   * Well-known JWKS
   * @description Endpoint for fetching JWKS
   */
  "get-.well-known-jwks.json": {
    parameters: {
      path: {
        tenant_id: components["parameters"]["tenant_id"];
      };
    };
    responses: {
      200: components["responses"]["jwks"];
    };
  };
}
